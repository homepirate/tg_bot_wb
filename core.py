import asyncio
from collections import defaultdict

from api_client import WBClientAPI
from config import config
from errors import AuthorizationError, RootIDError, UpdateCardsError
from services.company_service import get_sorted_companies, get_companies_with_nomenclature, get_company_by_api_key, \
    get_all_companies
from utils.core_utils import split_into_batches, is_weekend
from services.brand_service import get_night_brands, get_night_brand_wbids, get_all_brand_wbids_except_default

REQUEST_DELAY_ONE_SECOND = 1
REQUEST_DELAY_SIX_SECONDS = 6
BATCH_LIMIT = 3000

async def run_all_from():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ª–æ–≥–∏–∫–∏."""
    if is_weekend():
        async with config.AsyncSessionLocal() as session:
            night_brands = await get_night_brands(session)
            print(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ—á–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤: {len(night_brands)}")
    else:
        print("–°–µ–≥–æ–¥–Ω—è –Ω–µ –≤—ã—Ö–æ–¥–Ω–æ–π ‚Äî –Ω–æ—á–Ω—ã–µ –±—Ä–µ–Ω–¥—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è.")
        night_brands = []

    all_cards = await process_cards()
    updated_cards, tg_messages = await process_brands(all_cards, night_brands)
    error_send = await send_cards(updated_cards)

    await asyncio.sleep(600)

    async with config.AsyncSessionLocal() as session:
        companies = await get_all_companies(session)

    client = WBClientAPI()

    for company in companies:
        async with config.AsyncSessionLocal() as session:
            if is_weekend():
                wb_brand_ids = await get_night_brand_wbids(session, company.id, company.default_brand)
            else:
                wb_brand_ids = await get_all_brand_wbids_except_default(session, company.id, company.default_brand)

        if not wb_brand_ids:
            print(f"‚õîÔ∏è –ù–µ—Ç –±—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {company.name}")
            continue

        products = await client.get_all_data_by_company_id_and_brands(company.id, wb_brand_ids)
        print(f"üì¶ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {company.name}")


async def run_all_to():
    products = await get_all_product_from_catalog()
    root_ids = [product["root"] for product in products]
    print(f"Root_IDS {root_ids}")
    cards_for_update, errors = await get_and_update_brand_in_card(root_ids)
    print(f"cards_for_update {cards_for_update}")
    # error_send = await send_cards(cards_for_update)
    # errors.extend(error_send)
    return errors


async def process_cards():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π –∏ –∏—Ö –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã."""
    client = WBClientAPI()
    all_cards = []

    async with config.AsyncSessionLocal() as session:
        companies = await get_companies_with_nomenclature(session)

    for company in companies:
        print(f"\nüîç –ö–æ–º–ø–∞–Ω–∏—è: {company.name}")
        api_key = company.api_key  # –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á

        for nom in company.nomenclatures:
            try:
                root_id = int(nom.root_id)
            except (TypeError, ValueError):
                print(f"–ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π root_id: {nom.root_id}")
                continue

            cards = await client.get_cards_list(api_key, root_id)
            for card in cards:
                card["api_key"] = nom.company.api_key
                all_cards.append(card)
            print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è root_id={root_id}: {len(cards)}")
    return all_cards


async def process_brands(all_cards: list[dict], night_brands: list[str]) -> tuple[list[dict], list[str]]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—Ä–µ–Ω–¥—ã –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫, –≥–¥–µ –±—Ä–µ–Ω–¥ –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ default_brand,
    - —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram –æ–± —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö.
    """
    updated_cards = []
    messages_for_telegram = []

    for card in all_cards:
        brand = card.get("brand")
        api_key = card.get("api_key")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ API –∫–ª—é—á—É
        async with config.AsyncSessionLocal() as session:
            company = await get_company_by_api_key(session, api_key)

        if not company:
            print(f"–ö–æ–º–ø–∞–Ω–∏—è —Å –∫–ª—é—á–æ–º {api_key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            continue

        default_brand = company.default_brand
        root_id = card.get("root_id") or "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

        if brand == default_brand:
            messages_for_telegram.append(f"üî∏ RootID {root_id}: –±—Ä–µ–Ω–¥ –æ—Å—Ç–∞–ª—Å—è {default_brand}")
            continue

        if brand in night_brands:
            # –ù–æ—á–Ω–æ–π –±—Ä–µ–Ω–¥ ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
            continue

        # –ó–∞–º–µ–Ω–∏—Ç—å –±—Ä–µ–Ω–¥ –Ω–∞ default_brand
        card["brand"] = default_brand
        updated_cards.append(card)

    return updated_cards, messages_for_telegram


async def get_all_product_from_catalog() -> list[dict]:
    all_products = []
    api = WBClientAPI()
    companies = []

    async with config.AsyncSessionLocal() as session:
        companies = await get_sorted_companies(session)

    for company in companies:
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏: {company.name} (ID: {company.company_id})")

        company_products = await api.get_all_data_by_company_id(company.company_id)
        print(f" –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(company_products)}")

        for product in company_products:
            product["company_id"] = company.company_id

        all_products.extend(company_products)

    print(f"–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(all_products)}")
    return all_products


async def get_and_update_brand_in_card(available_root_ids: list) -> tuple[list[dict], list[str]]:
    client = WBClientAPI()
    errors = []
    updated_cards = []
    companies = []

    async with config.AsyncSessionLocal() as session:
        companies = await get_companies_with_nomenclature(session)

    for company in companies:
        print(f"\nüîç –ö–æ–º–ø–∞–Ω–∏—è: {company.name}")

        for nom in company.nomenclatures:
            try:
                root_id = int(nom.root_id)
            except (TypeError, ValueError):
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π root_id: {nom.root_id}")
                continue

            if root_id not in available_root_ids:
                print(f"–ü—Ä–æ–ø—É—â–µ–Ω root_id {root_id} ‚Äî –Ω–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ WB")
                continue

            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º root_id: {root_id}")
            cards = []
            try:
                cards = await client.get_cards_list(api_key=company.api_key, root_id=root_id)
            except AuthorizationError as e:
                raise e
            except RootIDError as e:
                errors.append(f"Company Name={company.name}, Company ID={company.company_id}: Error={e}")

            for card in cards:
                if card.get("brand") != nom.original_brand:
                    print(f"–±—Ä–µ–Ω–¥: {card.get('brand')} ‚Üí {nom.original_brand}")
                    card["brand"] = nom.original_brand
                    card["api_key"] = nom.company.api_key
                    updated_cards.append(card)

            await asyncio.sleep(REQUEST_DELAY_ONE_SECOND)

    print(f"\n–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –±—Ä–µ–Ω–¥–∞: {len(updated_cards)}")
    return updated_cards, errors


async def send_cards(cards: list[dict]) -> list[str]:
    if not cards:
        print("–ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return

    client = WBClientAPI()
    errors = []

    grouped_cards = defaultdict(list)
    for card in cards:
        api_key = card.get("api_key")
        if not api_key:
            print("–ü—Ä–æ–ø—É—â–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –±–µ–∑ API-–∫–ª—é—á–∞")
            continue
        grouped_cards[api_key].append(card)

    for api_key, card_list in grouped_cards.items():
        print(f"\n–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è api_key: {api_key}, –≤—Å–µ–≥–æ: {len(card_list)}")

        batches = split_into_batches(card_list, BATCH_LIMIT)
        for idx, batch in enumerate(batches, start=1):
            for card in batch:
                card.pop("api_key", None)

            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞—Ç—á–∞ {idx}/{len(batches)} ({len(batch)} –∫–∞—Ä—Ç–æ—á–µ–∫)...")

            try:
                success = await client.update_cards(api_key=api_key, cards=batch)
            except AuthorizationError as e:
                raise e
            except UpdateCardsError as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                errors.append(f"{api_key}: {e}")
                continue

            if success:
                print(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(batch)} –∫–∞—Ä—Ç–æ—á–µ–∫")
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∞—Ç—á–∞ {idx}")

            if idx < len(batches):
                await asyncio.sleep(REQUEST_DELAY_SIX_SECONDS)

    if errors:
        print(f"\n–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫: {len(errors)}")

    return errors