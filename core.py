import asyncio
from collections import defaultdict
from typing import Any

from api_client import WBClientAPI
from config import config
from errors import AuthorizationError, RootIDError, UpdateCardsError
from services.company_service import get_sorted_companies, get_companies_with_nomenclature, get_company_by_api_key, \
    get_all_companies
from utils.core_utils import split_into_batches, is_weekend, filter_card_top_level
from services.brand_service import get_night_brands, get_night_brand_wbids, get_all_brand_wbids_except_default

REQUEST_DELAY_ONE_SECOND = 1
REQUEST_DELAY_SIX_SECONDS = 6
BATCH_LIMIT = 3000

async def run_all_from() -> list[str]:
    error_send: list[str] = []

    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ª–æ–≥–∏–∫–∏."""
    if await is_weekend():
        async with config.AsyncSessionLocal() as session:
            night_brands = await get_night_brands(session)
            print(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ—á–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤: {len(night_brands)}")
    else:
        print("–°–µ–≥–æ–¥–Ω—è –Ω–µ –≤—ã—Ö–æ–¥–Ω–æ–π ‚Äî –Ω–æ—á–Ω—ã–µ –±—Ä–µ–Ω–¥—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è.")
        night_brands = []

    all_cards = await process_cards()

    # 1) –í—ã—Å—Ç–∞–≤–ª—è–µ–º –±—Ä–µ–Ω–¥—ã
    updated_cards, tg_messages = await process_brands(all_cards, night_brands)
    error_send.append("–ù–µ–∏–∑–º–µ–Ω–∏–≤—à–∏–µ—Å—è  –∫–∞—Ç–æ—á–∫–∏:")
    error_send.extend(tg_messages)
    print(updated_cards)

    # 2) –ì–æ—Ç–æ–≤–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ: —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º api_key
    prepared_cards: list[dict[str, Any]] = []
    for card in (updated_cards or []):
        api_key = card.get("api_key")
        if not api_key:
            print("run_all_from –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –±–µ–∑ API-–∫–ª—é—á–∞")
            continue
        payload = filter_card_top_level(card)   # —É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –ø–æ–ª—è –∏ api_key –∏–∑ payload
        payload["api_key"] = api_key           # –≤–µ—Ä–Ω—É—Ç—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤–Ω—É—Ç—Ä–∏ send_cards
        prepared_cards.append(payload)

    # 3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    error_send_card = await send_cards(prepared_cards)
    if error_send_card:
        error_send.append("–û—à–∏–±–∫–∏:")
        error_send.extend(error_send_card)

    # 4) –ü–∞—É–∑–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è —á–∞—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ (–∫–∞–∫ —É –≤–∞—Å –±—ã–ª–æ)
    await asyncio.sleep(10)
    # await asyncio.sleep(600)


    async with config.AsyncSessionLocal() as session:
        companies = await get_all_companies(session)

    client = WBClientAPI()

    for company in companies:
        async with config.AsyncSessionLocal() as session:
            if await is_weekend():
                wb_brand_ids = await get_night_brand_wbids(session, company.id, company.default_brand.name)
            else:
                wb_brand_ids = await get_all_brand_wbids_except_default(session, company.id, company.default_brand.name)

        if not wb_brand_ids:
            print(f"‚õîÔ∏è –ù–µ—Ç –±—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {company.name}")
            continue

        products = await client.get_all_data_by_company_id_and_brands(company.id, wb_brand_ids)
        print(f"üì¶ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {company.name}")

        product_root_ids = {p.get("root") for p in products if p.get("root")}

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
        retry_cards = [card for card in (updated_cards or []) if card.get("root") in product_root_ids]
        if not retry_cards:
            continue

        failed_cards: list[dict[str, Any]] = []

        for card in retry_cards:
            root_id = card["root_id"]
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Å—Ç–∞–≤–∏—Ç—å –±—Ä–µ–Ω–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ (–≤–∞—à–∞ –ª–æ–≥–∏–∫–∞)
                updated_cards, tg_messages = await process_brands(all_cards, night_brands)
                print(f"üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±—Ä–µ–Ω–¥ –¥–ª—è root_id={root_id}")
                if tg_messages:
                    error_send.append("–ù–µ–∏–∑–º–µ–Ω–∏–≤—à–∏–µ—Å—è  –∫–∞—Ç–æ—á–∫–∏:")
                    error_send.extend(tg_messages)

                retry_prepared = []
                for c in updated_cards or []:
                    api_key = c.get("api_key")
                    if not api_key:
                        continue
                    p = filter_card_top_level(c)
                    p["api_key"] = api_key
                    retry_prepared.append(p)
                error_send = await send_cards(retry_prepared)
                if error_send:
                    error_send.append("–û—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ:")
                    failed_cards.extend(error_send)

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—Ä–µ–Ω–¥–∞ root_id={root_id}: {e}")
                failed_cards.append(card)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–æ–∫ –≤ Telegram, –µ—Å–ª–∏ –µ—Å—Ç—å
        if failed_cards:
            messages = [
                f"‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—Ä–µ–Ω–¥ –¥–ª—è root_id {card['root_id']} (API –∫–ª—é—á: {card.get('api_key', '‚Äî')})"
                for card in failed_cards
            ]
            error_send.extend(messages)
    return error_send

async def run_all_to():
    products = await get_all_product_from_catalog()
    root_ids = [product["root"] for product in products]
    print(f"Root_IDS {root_ids}")
    cards_for_update, errors = await get_and_update_brand_in_card(root_ids)

    prepared_cards: list[dict[str, Any]] = []
    for card in cards_for_update or []:
        api_key = card.get("api_key")
        card['root'] = card.get("imtID")
        if not api_key:
            print("run_all_to –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –±–µ–∑ API-–∫–ª—é—á–∞")
            continue
        payload = filter_card_top_level(card)
        prepared_cards.append(payload)
    print(prepared_cards)
    error_send = await send_cards(prepared_cards)
    if error_send:
        errors.extend(error_send)
    return errors


async def process_cards():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π –∏ –∏—Ö –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã."""
    client = WBClientAPI()
    all_cards = []

    async with config.AsyncSessionLocal() as session:
        companies = await get_companies_with_nomenclature(session)

    for company in companies:
        print(f"\nüîç –ö–æ–º–ø–∞–Ω–∏—è: {company.name}")
        api_key = company.api_key  # –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á

        seen_root_ids = set()  # —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å root_id –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏f

        for nom in company.nomenclatures:
            # –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ int
            try:
                root_id = int(nom.root_id)
            except (TypeError, ValueError):
                print(f"–ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π root_id: {nom.root_id}")
                continue

            # –ø—Ä–æ–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–æ–≤
            if root_id in seen_root_ids:
                print(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç root_id: {root_id}")
                continue

            seen_root_ids.add(root_id)

            # –≤—ã–∑–æ–≤ API (–µ—Å–ª–∏ —É —Ç–µ–±—è api_key ‚Äî —ç—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å —Ç–æ–∫–µ–Ω–æ–º)
            cards = await client.get_cards_list(api_key=api_key, root_id=root_id)

            for card in cards:
                card["root"] = card["imtID"]
                card["api_key"] = nom.company.api_key
                all_cards.append(card)
            print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è root_id={root_id}: {len(cards)}")
    return all_cards


async def process_brands(all_cards: list[dict], night_brands: list[str]) -> tuple[list[dict], list[str]]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—Ä–µ–Ω–¥—ã –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫, –≥–¥–µ –±—Ä–µ–Ω–¥ –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ default_brand,
    - —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram –æ–± —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö.
    """
    updated_cards = []
    messages_for_telegram = []
    already_added_msgs = set()

    for card in all_cards:
        brand = card.get("brand")
        api_key = card.get("api_key")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ API –∫–ª—é—á—É
        async with config.AsyncSessionLocal() as session:
            company = await get_company_by_api_key(session, api_key)

        if not company:
            print(f"–ö–æ–º–ø–∞–Ω–∏—è —Å –∫–ª—é—á–æ–º {api_key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            continue

        default_brand = company.default_brand.name
        root_id = card.get("root") or "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

        if brand == default_brand:
            msg = f"üî∏ RootID {root_id}: –±—Ä–µ–Ω–¥ –æ—Å—Ç–∞–ª—Å—è {default_brand}"
            if msg not in already_added_msgs:
                messages_for_telegram.append(msg)
                already_added_msgs.add(msg)
            continue

        if brand in night_brands:
            # –ù–æ—á–Ω–æ–π –±—Ä–µ–Ω–¥ ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
            continue

        # –ó–∞–º–µ–Ω–∏—Ç—å –±—Ä–µ–Ω–¥ –Ω–∞ default_brand
        card["brand"] = default_brand
        updated_cards.append(card)

    return updated_cards, messages_for_telegram


async def get_all_product_from_catalog() -> list[dict]:
    all_products = []
    api = WBClientAPI()
    companies = []

    async with config.AsyncSessionLocal() as session:
        companies = await get_sorted_companies(session)

    for company in companies:
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏: {company.name} (ID: {company.company_id})")

        company_products = await api.get_all_data_by_company_id(company.company_id)
        print(f" –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(company_products)}")

        for product in company_products:
            product["company_id"] = company.company_id

        all_products.extend(company_products)

    print(f"–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(all_products)}")
    return all_products


async def get_and_update_brand_in_card(available_root_ids: list) -> tuple[list[dict], list[str]]:
    client = WBClientAPI()
    errors = []
    updated_cards = []
    companies = []

    async with config.AsyncSessionLocal() as session:
        companies = await get_companies_with_nomenclature(session)

    seen_root_ids = set()

    for company in companies:
        print(f"\nüîç –ö–æ–º–ø–∞–Ω–∏—è: {company.name}")

        for nom in company.nomenclatures:
            try:
                root_id = int(nom.root_id)
            except (TypeError, ValueError):
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π root_id: {nom.root_id}")
                continue

            if root_id in seen_root_ids:
                print(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω root_id {root_id} ‚Äî —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ")
                continue

            if root_id not in available_root_ids:
                print(f"‚õîÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω root_id {root_id} ‚Äî –Ω–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ WB")
                continue

            seen_root_ids.add(root_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏
            print(f"‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º root_id: {root_id}")

            try:
                cards = await client.get_cards_list(api_key=company.api_key, root_id=root_id)
            except AuthorizationError as e:
                raise e
            except RootIDError as e:
                errors.append(f"Company Name={company.name}, Company ID={company.company_id}: Error={e}")
                continue

            for card in cards:
                if card.get("brand") != nom.original_brand:
                    print(f"–±—Ä–µ–Ω–¥: {card.get('brand')} ‚Üí {nom.original_brand}")
                    card["brand"] = nom.original_brand
                    card["api_key"] = nom.company.api_key
                    updated_cards.append(card)

            await asyncio.sleep(REQUEST_DELAY_ONE_SECOND)

    print(f"\n–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –±—Ä–µ–Ω–¥–∞: {len(updated_cards)}")
    return updated_cards, errors


async def send_cards(cards: list[dict]) -> list[str]:

    if not cards:
        print("–ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return

    client = WBClientAPI()
    errors = []

    grouped_cards = defaultdict(list)

    for card in cards:
        api_key = card.get("api_key")
        if not api_key:
            print("send_cards –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –±–µ–∑ API-–∫–ª—é—á–∞")
            continue
        grouped_cards[api_key].append(card)

    for api_key, card_list in grouped_cards.items():
        print(f"\n–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è api_key: {api_key}, –≤—Å–µ–≥–æ: {len(card_list)}")

        batches = split_into_batches(card_list, BATCH_LIMIT)
        for idx, batch in enumerate(batches, start=1):

            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞—Ç—á–∞ {idx}/{len(batches)} ({len(batch)} –∫–∞—Ä—Ç–æ—á–µ–∫)...")

            try:
                success = await client.update_cards(api_key=api_key, cards=batch)
            except AuthorizationError as e:
                raise e
            except UpdateCardsError as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                errors.append(f"{api_key}: {e}")
                continue

            if success:
                print(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(batch)} –∫–∞—Ä—Ç–æ—á–µ–∫")
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∞—Ç—á–∞ {idx}")

            if idx < len(batches):
                await asyncio.sleep(REQUEST_DELAY_SIX_SECONDS)

    if errors:
        print(f"\n–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫: {len(errors)}")

    return errors