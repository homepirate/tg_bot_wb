# scheduler/runner.py

import asyncio
import pytz
from datetime import datetime, timedelta

from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from sqlalchemy.ext.asyncio import async_sessionmaker
from sqlalchemy import select

from config import config
from models import Schedule
from services.schedule_service import is_schedule_still_exists

DAYS_MAPPING_REVERSE = {
    0: "–ü–ù",
    1: "–í–¢",
    2: "–°–†",
    3: "–ß–¢",
    4: "–ü–¢",
    5: "–°–ë",
    6: "–í–°",
}

def schedule_weekly_task(
    session_maker: async_sessionmaker,
    weekday: int,
    hour: int,
    minute: int,
    user_id: int,
    action: str,
    callback,
):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è –ø–æ –ú–°–ö,
    –∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∑–∞–¥–∞—á–∞ –≤—Å—ë –µ—â—ë –µ—Å—Ç—å –≤ –ë–î.
    """
    msk = pytz.timezone("Europe/Moscow")

    async def run_periodically():
        while True:
            now = datetime.now(msk)
            days_ahead = (weekday - now.weekday() + 7) % 7
            target_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0) + timedelta(days=days_ahead)
            if target_time <= now:
                target_time += timedelta(days=7)

            await asyncio.sleep((target_time - now).total_seconds())

            still_exists = await is_schedule_still_exists(
                session_maker=session_maker,
                user_id=user_id,
                action=action,
                weekday=weekday,
                hour=hour,
                minute=minute
            )

            if still_exists:
                try:
                    await callback(user_id, action)
                except Exception as e:
                    print(f"[–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏] {e}")
            else:
                print(f"‚õîÔ∏è –ó–∞–¥–∞—á–∞ –¥–ª—è user_id={user_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º.")
                return

    asyncio.create_task(run_periodically())

async def schedule_all_tasks(session_maker: async_sessionmaker, callback):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
    """
    # 1) –ó–∞–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
    async with session_maker() as session:
        result = await session.execute(select(Schedule))
        schedules = result.scalars().all()

    # 2) –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑ (aiogram 3.7+: parse_mode —á–µ—Ä–µ–∑ default)
    bot = Bot(token=config.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    try:
        for schedule in schedules:
            weekday = schedule.weekday
            hour = schedule.time.hour
            minute = schedule.time.minute
            user_id = schedule.user_id
            action = schedule.action

            # –ø–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É
            schedule_weekly_task(
                session_maker=session_maker,
                weekday=weekday,
                hour=hour,
                minute=minute,
                callback=callback,
                user_id=user_id,
                action=action,
            )

            day_str = DAYS_MAPPING_REVERSE.get(weekday, str(weekday))

            # —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text=f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–ª—è '{action}' –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {day_str} {hour:02}:{minute:02} –ø–æ –ú–°–ö"
                )
                print(f"üîÅ –ó–∞–¥–∞—á–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: user_id={user_id}, action={action}, {day_str} {hour:02}:{minute:02}")
            except Exception as e:
                print(f"[schedule_all_tasks] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ user_id={user_id}: {e}")
    finally:
        await bot.session.close()